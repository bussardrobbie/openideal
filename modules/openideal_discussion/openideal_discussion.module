<?php

/**
 * @file
 * Contain Openideal discussion hooks.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function openideal_discussion_form_node_discussion_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Hide title for the discussion add form.
  // @todo create the modal for Discussion edit form.
  if (\Drupal::request()->query->get('_wrapper_format') == 'drupal_bootstrap4_modal') {
    // @todo make a checks.
    $title = \Drupal::request()->request->get('dialogOptions')['title'];
    $form['title']['widget'][0]['value']['#default_value'] = t('In idea: @idea_title', ['@idea_title' => $title]);
    $form['title']['#attributes']['class'] = 'd-none';
    $form['body']['widget'][0]['#title_display'] = 'invisible';
  }
}

/**
 * Implements hook_ENTITY_TYPE_create_access().
 *
 * Allow to add comments in Idea discussion only
 * for group member with certain permission.
 */
function openideal_discussion_comment_create_access(AccountInterface $account, array $context, $entity_bundle) {
  if (($node = \Drupal::routeMatch()->getParameter('node')) && $node->bundle() == 'discussion') {
    /** @var \Drupal\group\Access\GroupPermissionChecker $permission_checker */
    $permission_checker = \Drupal::service('group_permission.checker');
    /** @var \Drupal\openideal_idea\OpenidealHelper $helper */
    $helper = \Drupal::service('openideal_idea.helper');

    $group = $helper->getGroupFromNode($node);
    $status = (bool) $node->field_status->value;
    return AccessResult::forbiddenIf(!$permission_checker->hasPermissionInGroup('create group_node:discussion entity', $account, $group) || !$status);
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_access().
 *
 * Hide the discussion when field_visibility turned off and make it visible only
 * for user with 'view unpublished group_node:discussion entity' permission.
 */
function openideal_discussion_node_access(NodeInterface $entity, $operation, AccountInterface $account) {
  if ($operation == 'view' && $entity->bundle() == 'discussion') {
    /** @var \Drupal\group\Access\GroupPermissionChecker $permission_checker */
    $permission_checker = \Drupal::service('group_permission.checker');
    /** @var \Drupal\openideal_idea\OpenidealHelper $helper */
    $helper = \Drupal::service('openideal_idea.helper');

    // Get the group from node.
    if (!($group = $helper->getGroupFromNode($entity))) {
      \Drupal::logger('openideal_disscussion')->error('Canot find group for given discussion');
      // @todo Don't now if need to restrict access here.
      return AccessResult::neutral();
    }

    if ($permission_checker->hasPermissionInGroup('view unpublished group_node:discussion entity', $account, $group)) {
      return AccessResult::forbiddenIf(!$entity->field_visibility->value);
    }
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function openideal_discussion_node_insert(EntityInterface $entity) {
  if ($entity->bundle() == 'discussion') {
    /** @var \Drupal\group\Entity\Group $group */
    $group = \Drupal::routeMatch()->getParameter('group');
    if (!$group) {
      \Drupal::logger('openideal_discussion')->error("Can't find group for Discussion");
    }

    $ideas = $group->getContentEntities('group_node:idea');
    $idea = current($ideas);
    $entity->set('field_idea', $idea);
    $entity->save();
  }
}
